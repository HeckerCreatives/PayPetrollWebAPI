

Wallet Statistics
- Game - gamebalance wallet history (To edit amount game balance history should be editable)
- Referral - Direct Referral Balance history should be editable
- Unilevel - Unilevel Balance history should be editable

Wallet Balance
- Fiat Balance
- Game Balance
- Commision Balance
  a. Direct Balance (lvl 1)
  b. Unilevel Balance(lvl 2 and so on)



My solution would be for example

if i edit direct balance wallet
then I should create a wallet history that negates the previous value
and create another wallet history and add the new value that the user has edit
same for every other action

// problems

if we create edit and delete options in the wallet history
then it would not affect the balance
because deleting or editing may make it's value to negative


// solution

I should create two kinds of function

first function is for edit wallets

if i edit direct balance wallet
then I should create a wallet history that negates the previous value
and add the new value that the user has edit
same for every other action


and then use the recalculate wallet balance function

second is when I edit/delete wallet history
if i edit/delete wallet history then i should use the recalculate wallet balance function




Recalculate Wallet Balance

 - this function recalculates wallet balance based on the withdrawn amount and wallet history


        const totalHistory = await Wallethistory.aggregate([
            { $match: { owner: new mongoose.Types.ObjectId(ownerId), type: walletType, status: { $ne: "deleted" } } },
            { $group: { _id: null, totalAmount: { $sum: "$amount" } } },
        ]);

        const totalWithdrawals = await Payout.aggregate([
            { $match: { owner: new mongoose.Types.ObjectId(ownerId), type: walletType, status: "done" } },
            { $group: { _id: null, totalAmount: { $sum: "$value" } } },
        ]);

        const historyAmount = totalHistory.length > 0 ? totalHistory[0].totalAmount : 0;
        const withdrawalAmount = totalWithdrawals.length > 0 ? totalWithdrawals[0].totalAmount : 0;

        const newBalance = historyAmount - withdrawalAmount;

        // Update the wallet balance
        await Userwallets.findOneAndUpdate(
            { owner: new mongoose.Types.ObjectId(ownerId), type: walletType },
            { amount: newBalance }
        );
